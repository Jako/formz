{
    "docs": [
        {
            "location": "/", 
            "text": "Formz\n\n\nFormz is a UI form builder that allows website managers and developers alike to \neasily create web forms. It was built to allow the website manager to create \nweb forms to collect information and store it in the database and receive via \nemail. This Add-on should be valuable to Developer and Website manager alike, \nas it gives a easy way for Developers to create a FormIt form and store/email \nthe data to the website manager in a easy to manage way.\n\n\nRequirements\n\n\n\n\nMODX Revolution 2.2.4+\n\n\nFormIt\n\n\nFormitFastPack", 
            "title": "Home"
        }, 
        {
            "location": "/#formz", 
            "text": "Formz is a UI form builder that allows website managers and developers alike to \neasily create web forms. It was built to allow the website manager to create \nweb forms to collect information and store it in the database and receive via \nemail. This Add-on should be valuable to Developer and Website manager alike, \nas it gives a easy way for Developers to create a FormIt form and store/email \nthe data to the website manager in a easy to manage way.  Requirements   MODX Revolution 2.2.4+  FormIt  FormitFastPack", 
            "title": "Formz"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for Formz in the Package Manager of a MODX installation and install it in there.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you can manually install Formz.\n\n\n\n\nDownload the transport package from \nMODX Extras\n\n  (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.\n\n\nFormz should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package Management\n. \nThe GitHub repository of Formz contains a \nconfig.json\n \nto build that package locally. Use this option, if you want to debug Formz and/or contribute bugfixes and enhancements.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for Formz in the Package Manager of a MODX installation and install it in there.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you can manually install Formz.   Download the transport package from  MODX Extras \n  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.  Formz should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package Management . \nThe GitHub repository of Formz contains a  config.json  \nto build that package locally. Use this option, if you want to debug Formz and/or contribute bugfixes and enhancements.", 
            "title": "Build it from source"
        }, 
        {
            "location": "/getting-started/", 
            "text": ".figure { padding: 10px 0; }\n.figure img { height: auto; max-width: 100%; }\n\n\n\n\nQuickstart Guide\n\n\nHere I will walk you through creating your first Formz form:\n\n\n\n\nGo to the extras menu in MODX and select \nFormz Builder\n.\nFigure 1\n Component Menu\n\n\nClick on \nCreate a new Form\n, once the interface is ready we can start by entering the required fields. The \nName\n field is required and so is the \nSuccess Message\n, all the other fields can remain default.\nFigure 2\n Create a new Form\n\n\nEnter \n\"Contact\"\n in the \nName\n field and \n\"Thank you for contacting us\"\n in the \nSuccess Message\n field.\nFigure 3\n Form Required Fields\n\n\nClick on \nSave\n and the browser should reload and you will now be in edit mode.\n\n\nClick on \nFields\n tab and this is where you enter the fields you want available to your form.\nFigure 5\n Fields Tab\n\n\nAbove the Grid you will see \nAdd Field\n action at the top right. Click on this button and a form window will open.\n\n\nThe \nLabel\n field is the only required field on this form, we will enter \n\"Name\"\n for our Label.\nFigure 7\n Field Window\n\n\nNow click on the \nProperties\n tab and check the \nrequired\n checkbox. This will make sure that the user has to enter a name in order to submit the web form.\nFigure 8\n Properties Tab\n\n\nRepeat step 7 but this time lets enter in the \nLabel\n field \n\"Email\"\n and on the \nProperties\n tab lets check the \nrequired\n checkbox and select from the \nValidation\n field \n\"Email\"\n.\nFigure 9\n Validation Field\n\n\nRepeat step 7 but this time lets enter in the \nLabel\n field \n\"Message\"\n, then change the \nType\n field to \n\"Textarea\"\n and on the \nProperties\n tab check the \nrequired\n checkbox\nFigure 10\n Type Field\n\n\nLets create our Template Variable to display our Form on the website, lets enter in the \nName\n field \n\"form\"\n and in the \nCaption\n field \n\"Form\"\n.\nFigure 11\n Template Variable\n\n\nClick the \nInput Options\n tab and set the \nInput Type\n field to \n\"formz\"\n.\nFigure 12\n Input Options\n\n\nClick the \nOutput Options\n tab and set the \nOutput Type\n field to \n\"formz\"\n.\nFigure 13\n Output Options\n\n\nClick the \nTemplate Access\n tab and set which template you want to have access to your Template Variable.\nFigure 14\n Template Variable Tab\n\n\nPlace you newly created Template Variable \n[[*form]]\n inside your template or in the content area of the page you will create. I will do the latter for this guide.\nFigure 15\n Page Content\n\n\nClick the \nTemplate Variables\n tab and select your \n\"Contact\"\n from the \nForm\n field.\nFigure 16\n Template Variable Tab\n\n\n\n\nCongratulations you have created your first web form with Formz, now go and create more and explore the features.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#quickstart-guide", 
            "text": "Here I will walk you through creating your first Formz form:   Go to the extras menu in MODX and select  Formz Builder . Figure 1  Component Menu  Click on  Create a new Form , once the interface is ready we can start by entering the required fields. The  Name  field is required and so is the  Success Message , all the other fields can remain default. Figure 2  Create a new Form  Enter  \"Contact\"  in the  Name  field and  \"Thank you for contacting us\"  in the  Success Message  field. Figure 3  Form Required Fields  Click on  Save  and the browser should reload and you will now be in edit mode.  Click on  Fields  tab and this is where you enter the fields you want available to your form. Figure 5  Fields Tab  Above the Grid you will see  Add Field  action at the top right. Click on this button and a form window will open.  The  Label  field is the only required field on this form, we will enter  \"Name\"  for our Label. Figure 7  Field Window  Now click on the  Properties  tab and check the  required  checkbox. This will make sure that the user has to enter a name in order to submit the web form. Figure 8  Properties Tab  Repeat step 7 but this time lets enter in the  Label  field  \"Email\"  and on the  Properties  tab lets check the  required  checkbox and select from the  Validation  field  \"Email\" . Figure 9  Validation Field  Repeat step 7 but this time lets enter in the  Label  field  \"Message\" , then change the  Type  field to  \"Textarea\"  and on the  Properties  tab check the  required  checkbox Figure 10  Type Field  Lets create our Template Variable to display our Form on the website, lets enter in the  Name  field  \"form\"  and in the  Caption  field  \"Form\" . Figure 11  Template Variable  Click the  Input Options  tab and set the  Input Type  field to  \"formz\" . Figure 12  Input Options  Click the  Output Options  tab and set the  Output Type  field to  \"formz\" . Figure 13  Output Options  Click the  Template Access  tab and set which template you want to have access to your Template Variable. Figure 14  Template Variable Tab  Place you newly created Template Variable  [[*form]]  inside your template or in the content area of the page you will create. I will do the latter for this guide. Figure 15  Page Content  Click the  Template Variables  tab and select your  \"Contact\"  from the  Form  field. Figure 16  Template Variable Tab   Congratulations you have created your first web form with Formz, now go and create more and explore the features.", 
            "title": "Quickstart Guide"
        }, 
        {
            "location": "/usage/", 
            "text": "Formz Builder User Interface\n\n\nThe User Interface (UI) of Formz should be easy to use and follow. Inside of \nthe UI we tried to keep action names as user friendly as possible so that even \na beginner can start using the system from as early as possible.\n\n\nFormz Template Variable\n\n\nIn the Formz Template Variable you could set a few Output Options. They all \nchange the output of the Formz Snippet \nfmzForms\n called in the template \nvariable output. The following Output Options change the the following Snippet \nProperties.\n\n\n\n\n\n\n\n\nOutput Option\n\n\nfmzForms Snippet Property\n\n\n\n\n\n\n\n\n\n\nForm Template\n\n\ntpl\n\n\n\n\n\n\nForm Field Template\n\n\nfieldTpl\n\n\n\n\n\n\nForm Field Types Template\n\n\nfieldTypesTpl\n\n\n\n\n\n\nForm Field Wrapper Template\n\n\nfieldWrapTpl\n\n\n\n\n\n\n\n\nFormz Snippet\n\n\nThis is what make creating frontend forms with Formz so easy, the main Formz \nSnippet \nfmzForms\n ties in all the code for the frontend form using \n\nFormIt\n and \n\nFormItFastPack\n.\n\n\nThe Snippet work behind the scenes when you are using the formz output type in \nyour Template Variable. You can use the Formz Snippet \nfmzForms\n directly by \nadding it in the template you have attached your Formz Template Variable to. If \nyou decide to use the Formz Snippet \nfmzForms\n inside of your template, make \nsure you change the Template Variable output type to \ndefault\n.\n\n\nThe default Formz Snippet call should look like this:\n\n\n[[!fmzForms?\n\nid=`[[*formz]]`\n]]\n\n\n\n\n[[*formz]]\n has to be replaced with the name of your Formz TV, this is the \nonly required parameter you need to pass to the Formz Snippet \nfmzForms\n.\n\n\nThe following properties could be set in the snippet call:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntpl\n\n\nName of the chunk containing the Formz form template.\n\n\nformTpl\n\n\n\n\n\n\nid\n\n\nForm ID\n\n\n-\n\n\n\n\n\n\nhookPrefix\n\n\nPrefix of the FormIt hooks called by Formz\n1\n.\n\n\nfmzForm_\n\n\n\n\n\n\nfieldTpl\n\n\nName of the chunk containing the Formz field template.\n\n\nfieldTpl\n\n\n\n\n\n\nfieldTypesTpl\n\n\nName of the chunk containing the Formz field types template (see tpl property in \nFormitFastPack Field Snippet\n).\n\n\n-\n\n\n\n\n\n\nfieldWrapTpl\n\n\nName of the chunk containing the Formz field wrapper template (see outer_tpl property in \nFormitFastPack Field Snippet\n).\n\n\n-\n\n\n\n\n\n\n\n\nYou have to duplicate and change the default Formz chunks \nemailTpl\n, \n\nfieldTpl\n and \nformTpl\n, if you want to set your own options to the \nFormIt\n \nand the \nfield\n snippet calls created with Formz.\n\n\n\n\n\n\n\n\n\n\nDepending on the Formz form method the following hooks are called with \nthe default hookPrefix \nfmzForm_database\n or \nfmzForm_email", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#formz-builder-user-interface", 
            "text": "The User Interface (UI) of Formz should be easy to use and follow. Inside of \nthe UI we tried to keep action names as user friendly as possible so that even \na beginner can start using the system from as early as possible.", 
            "title": "Formz Builder User Interface"
        }, 
        {
            "location": "/usage/#formz-template-variable", 
            "text": "In the Formz Template Variable you could set a few Output Options. They all \nchange the output of the Formz Snippet  fmzForms  called in the template \nvariable output. The following Output Options change the the following Snippet \nProperties.     Output Option  fmzForms Snippet Property      Form Template  tpl    Form Field Template  fieldTpl    Form Field Types Template  fieldTypesTpl    Form Field Wrapper Template  fieldWrapTpl", 
            "title": "Formz Template Variable"
        }, 
        {
            "location": "/usage/#formz-snippet", 
            "text": "This is what make creating frontend forms with Formz so easy, the main Formz \nSnippet  fmzForms  ties in all the code for the frontend form using  FormIt  and  FormItFastPack .  The Snippet work behind the scenes when you are using the formz output type in \nyour Template Variable. You can use the Formz Snippet  fmzForms  directly by \nadding it in the template you have attached your Formz Template Variable to. If \nyou decide to use the Formz Snippet  fmzForms  inside of your template, make \nsure you change the Template Variable output type to  default .  The default Formz Snippet call should look like this:  [[!fmzForms? id=`[[*formz]]`\n]]  [[*formz]]  has to be replaced with the name of your Formz TV, this is the \nonly required parameter you need to pass to the Formz Snippet  fmzForms .  The following properties could be set in the snippet call:     Property  Description  Default      tpl  Name of the chunk containing the Formz form template.  formTpl    id  Form ID  -    hookPrefix  Prefix of the FormIt hooks called by Formz 1 .  fmzForm_    fieldTpl  Name of the chunk containing the Formz field template.  fieldTpl    fieldTypesTpl  Name of the chunk containing the Formz field types template (see tpl property in  FormitFastPack Field Snippet ).  -    fieldWrapTpl  Name of the chunk containing the Formz field wrapper template (see outer_tpl property in  FormitFastPack Field Snippet ).  -     You have to duplicate and change the default Formz chunks  emailTpl ,  fieldTpl  and  formTpl , if you want to set your own options to the  FormIt  \nand the  field  snippet calls created with Formz.      Depending on the Formz form method the following hooks are called with \nthe default hookPrefix  fmzForm_database  or  fmzForm_email", 
            "title": "Formz Snippet"
        }
    ]
}